import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JLabel;

import java.awt.Font;

import javax.swing.JButton;
import javax.swing.JComboBox;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

import java.awt.Color;
import java.io.File;

/**************
 * Alex Shank
 * Java II
 * 11-23-15
 **************/
public class PanelReview extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	BrawlFrame ParentFrame;
	private DefaultTableModel modelA;
	private DefaultTableModel modelB;
	private DefaultTableModel modelC;
	private DefaultTableModel modelD;
	private JTable tableReview;
	private JScrollPane scrollPane;
	private String[] saGroupGames;
	private String[] saTeamsA = new String[8];
	private String[] saTeamsB = new String[8];
	private String[] saTeamsC = new String[8];
	private String[] saTeamsD = new String[8];

	
	/**
	 * Create the panel.
	 */
	public PanelReview(BrawlFrame pParentFrame) //has a bunch of stuff generated by GUI
	{
		setLayout(null);
		ParentFrame = pParentFrame;
		
		int iRoundNumber = ParentFrame.EventManager.getRoundNumber();
		
		JLabel lblReviewAndEdit = new JLabel("Round 1");
		lblReviewAndEdit.setHorizontalAlignment(SwingConstants.CENTER);
		lblReviewAndEdit.setFont(new Font("Tahoma", Font.PLAIN, 20));
		lblReviewAndEdit.setBounds(218, 11, 472, 33);
		add(lblReviewAndEdit);
		lblReviewAndEdit.setText("Round " + iRoundNumber);
		
		JLabel lblCaution = new JLabel("Edit any scores that are incorrect.");
		lblCaution.setHorizontalAlignment(SwingConstants.CENTER);
		lblCaution.setBounds(212, 416, 377, 23);
		add(lblCaution);
		
		/*
		 * Create the 4 group models
		 */
		modelA = new DefaultTableModel()					//Stop the cells from being edited.
		{
			private static final long serialVersionUID = 1L;
			@Override	
			public boolean isCellEditable(int row, int column)
			{
				return false;
			}
		};
		modelA.addColumn("Team One");
		modelA.addColumn("Score One");
		modelA.addColumn("Score Two");
		modelA.addColumn("Team Two");
				//will add 4 most recent games to the model.
		int k = ParentFrame.EventManager.getGroup(0).getGamesArray().size();
		int j = k - 4;
		for(int i = j; i < k; i++)
		{
			saGroupGames = ParentFrame.EventManager.getGroup(0).getGameAt(i).gameToStringArray();
			modelA.addRow(saGroupGames);
		}
		
		modelB = new DefaultTableModel()					//Stop the cells from being edited.
		{
			private static final long serialVersionUID = 1L;
			@Override	
			public boolean isCellEditable(int row, int column)
			{
				return false;
			}
		};
		modelB.addColumn("Team One");
		modelB.addColumn("Score One");
		modelB.addColumn("Score Two");
		modelB.addColumn("Team Two");
		for(int i = j; i < k; i++)
		{
			saGroupGames = ParentFrame.EventManager.getGroup(1).getGameAt(i).gameToStringArray();
			modelB.addRow(saGroupGames);
		}
		
		modelC = new DefaultTableModel()					//Stop the cells from being edited.
		{
			private static final long serialVersionUID = 1L;
			@Override	
			public boolean isCellEditable(int row, int column)
			{
				return false;
			}
		};
		modelC.addColumn("Team One");
		modelC.addColumn("Score One");
		modelC.addColumn("Score Two");
		modelC.addColumn("Team Two");
		for(int i = j; i < k; i++)
		{
			saGroupGames = ParentFrame.EventManager.getGroup(2).getGameAt(i).gameToStringArray();
			modelC.addRow(saGroupGames);
		}
		
		modelD = new DefaultTableModel()					//Stop the cells from being edited.
		{
			private static final long serialVersionUID = 1L;
			@Override	
			public boolean isCellEditable(int row, int column)
			{
				return false;
			}
		};
		modelD.addColumn("Team One");
		modelD.addColumn("Score One");
		modelD.addColumn("Score Two");
		modelD.addColumn("Team Two");
		for(int i = j; i < k; i++)
		{
			saGroupGames = ParentFrame.EventManager.getGroup(3).getGameAt(i).gameToStringArray();
			modelD.addRow(saGroupGames);
		}		
		/*
		 * end of creating the 4 table models
		 */
		
		
		/*
		 * Create the table
		 */
		scrollPane = new JScrollPane();		//put in a scroll pane
		scrollPane.setBounds(10, 55, 680, 350);
		add(scrollPane);
		tableReview = new JTable(modelA); 			//the window panel will open with modelA displayed as default
		tableReview.setBackground(Color.PINK);
		scrollPane.setViewportView(tableReview);
		tableReview.setVisible(true);
		tableReview.getTableHeader().setReorderingAllowed(false);		//disable reordering columns
		tableReview.getTableHeader().setResizingAllowed(false);			//disable resizing columns
		/*
		 * end of creating the table
		 */
		
		/*
		 * Create combobox with group names
		 */
		String[] saGroupNames = new String[4];			//get group names for combobox of groups
		for(int i = 0; i < 4; i++)
		{
			saGroupNames[i] = ParentFrame.EventManager.getGroup(i).getGroupName();
		}
		@SuppressWarnings({ "unchecked", "rawtypes" })		//set combobox with created string array
		JComboBox comboGroup = new JComboBox(saGroupNames);
		comboGroup.setBackground(Color.PINK);
		comboGroup.setBounds(10, 11, 198, 20);
		add(comboGroup);
		comboGroup.addActionListener(				//set table based on selected group with this action listener
                new ActionListener()
                {
                    public void actionPerformed(ActionEvent e)
                    {
                    	/*
                		 * load table based on group
                		 */
                		if(comboGroup.getSelectedIndex() == 0)
                		{
                			tableReview.setModel(modelA);
                		}
                		if(comboGroup.getSelectedIndex() == 1)
                		{
                			tableReview.setModel(modelB);
                		}
                		if(comboGroup.getSelectedIndex() == 2)
                		{
                			tableReview.setModel(modelC);
                		}
                		if(comboGroup.getSelectedIndex() == 3)
                		{
                			tableReview.setModel(modelD);
                		}
                		/*
                		 * end of load table based on group
                		 */
                    }
                }            
        );
		
		JButton btnBack = new JButton("Back");
		btnBack.addActionListener(new ActionListener() 						//what happens on the back button press
		{
			public void actionPerformed(ActionEvent e) 
			{
				//go to panelScore
				PanelScore panelscore = new PanelScore(ParentFrame);
				ParentFrame.setContentPane(panelscore);
				ParentFrame.revalidate();
			}
		});
		btnBack.setBounds(10, 416, 91, 23);
		add(btnBack);
		
		JButton btnContinue = new JButton("Continue");
		btnContinue.addActionListener(new ActionListener() 				//when you hit the continue button
		{
			public void actionPerformed(ActionEvent e) 
			{
				try 
				{
					int iNumberOfGames = ParentFrame.EventManager.getGroup(0).getGamesArray().size();
					
					/*
					 * if data needs to be inputted
					 */
					if (ParentFrame.EventManager.wasLoaded() == false
							|| (ParentFrame.EventManager.wasLoaded() == true && iNumberOfGames < 30))		//useless if, will get rid of later...
					{
						tableReview.setModel(modelA);
						saTeamsA[0] = (String) tableReview.getModel()
								.getValueAt(0, 0); //get team names from each model to check for duplicates
						saTeamsA[1] = (String) tableReview.getModel()
								.getValueAt(0, 3); //I could have used a loop to fill these
						saTeamsA[2] = (String) tableReview.getModel()
								.getValueAt(1, 0); //but that is a lot of work
						saTeamsA[3] = (String) tableReview.getModel()
								.getValueAt(1, 3); //like 4 peoples' worth of work...
						saTeamsA[4] = (String) tableReview.getModel()
								.getValueAt(2, 0);
						saTeamsA[5] = (String) tableReview.getModel()
								.getValueAt(2, 3);
						saTeamsA[6] = (String) tableReview.getModel()
								.getValueAt(3, 0);
						saTeamsA[7] = (String) tableReview.getModel()
								.getValueAt(3, 3);
						tableReview.setModel(modelB);
						saTeamsB[0] = (String) tableReview.getModel()
								.getValueAt(0, 0);
						saTeamsB[1] = (String) tableReview.getModel()
								.getValueAt(0, 3);
						saTeamsB[2] = (String) tableReview.getModel()
								.getValueAt(1, 0);
						saTeamsB[3] = (String) tableReview.getModel()
								.getValueAt(1, 3);
						saTeamsB[4] = (String) tableReview.getModel()
								.getValueAt(2, 0);
						saTeamsB[5] = (String) tableReview.getModel()
								.getValueAt(2, 3);
						saTeamsB[6] = (String) tableReview.getModel()
								.getValueAt(3, 0);
						saTeamsB[7] = (String) tableReview.getModel()
								.getValueAt(3, 3);
						tableReview.setModel(modelC);
						saTeamsC[0] = (String) tableReview.getModel()
								.getValueAt(0, 0);
						saTeamsC[1] = (String) tableReview.getModel()
								.getValueAt(0, 3);
						saTeamsC[2] = (String) tableReview.getModel()
								.getValueAt(1, 0);
						saTeamsC[3] = (String) tableReview.getModel()
								.getValueAt(1, 3);
						saTeamsC[4] = (String) tableReview.getModel()
								.getValueAt(2, 0);
						saTeamsC[5] = (String) tableReview.getModel()
								.getValueAt(2, 3);
						saTeamsC[6] = (String) tableReview.getModel()
								.getValueAt(3, 0);
						saTeamsC[7] = (String) tableReview.getModel()
								.getValueAt(3, 3);
						tableReview.setModel(modelD);
						saTeamsD[0] = (String) tableReview.getModel()
								.getValueAt(0, 0);
						saTeamsD[1] = (String) tableReview.getModel()
								.getValueAt(0, 3);
						saTeamsD[2] = (String) tableReview.getModel()
								.getValueAt(1, 0);
						saTeamsD[3] = (String) tableReview.getModel()
								.getValueAt(1, 3);
						saTeamsD[4] = (String) tableReview.getModel()
								.getValueAt(2, 0);
						saTeamsD[5] = (String) tableReview.getModel()
								.getValueAt(2, 3);
						saTeamsD[6] = (String) tableReview.getModel()
								.getValueAt(3, 0);
						saTeamsD[7] = (String) tableReview.getModel()
								.getValueAt(3, 3);
						tableReview.setModel(modelA);
						/*
						 * check to see if all teams have played this round.
						 */
						for (int i = 0; i < 8; i++) //go through group's team names, if a name appears twice than the user can't continue
						{
							for (int j = 0; j < 8; j++) {
								if (saTeamsA[i].equals(saTeamsA[j]) && i != j) {
									throw new IllegalArgumentException(); //if names at different indexes are the same, no good
								}
							}
						}
						for (int i = 0; i < 8; i++) //second group
						{
							for (int j = 0; j < 8; j++) {
								if (saTeamsB[i].equals(saTeamsB[j]) && i != j) {
									throw new IllegalArgumentException();
								}
							}
						}
						for (int i = 0; i < 8; i++) //third group
						{
							for (int j = 0; j < 8; j++) {
								if (saTeamsC[i].equals(saTeamsC[j]) && i != j) {
									throw new IllegalArgumentException();
								}
							}
						}
						for (int i = 0; i < 8; i++) //fourth group
						{
							for (int j = 0; j < 8; j++) {
								if (saTeamsD[i].equals(saTeamsD[j]) && i != j) {
									throw new IllegalArgumentException();
								}
							}
						}
						/*
						 * end of checking if all teams have played
						 */
						
						if (ParentFrame.EventManager.getFlightAt(0) == null) 
						{
							//add wins, loses, and teams beaten to each team object, if the flights weren't already formed
							for (int i = 0; i < 4; i++) {
								ParentFrame.EventManager.getGroup(i)
										.addWinsAndLoses();
							}
						}
						//call method in manager to rank the teams******
						ParentFrame.EventManager.rankTeams();
						
						//go to the standings panel (basically just for the user).
						PanelStandings panelstandings = new PanelStandings(ParentFrame);
						ParentFrame.setContentPane(panelstandings);
						ParentFrame.revalidate();
					}
									
					
				}//end of try
				catch (IllegalArgumentException e1) 			//catches when a team played twice in one round
				{
					lblCaution.setText("All teams must play once, and only once.");
				}
			}
		});//end of button continue action listener
		btnContinue.setBounds(599, 416, 91, 23);
		add(btnContinue);
		
		JButton btnEdit = new JButton("Edit");
		btnEdit.addActionListener(new ActionListener() 
		{
			public void actionPerformed(ActionEvent e) //what happens when you edit a table row
			{
				try 
				{
					/*
					 * Pass the edit panel the old game info so it can find the old game and change it
					 */
					int iGroupIndex = comboGroup.getSelectedIndex();
					int iRow = tableReview.getSelectedRow();
					String[] oldGameInfo = new String[4];
					oldGameInfo[0] = (String) tableReview.getValueAt(iRow, 0);	//team 1 name
					oldGameInfo[1] = (String) tableReview.getValueAt(iRow, 1);	//team 1 score
					oldGameInfo[2] = (String) tableReview.getValueAt(iRow, 2);	//team 2 score
					oldGameInfo[3] = (String) tableReview.getValueAt(iRow, 3);	//team 2 name
					
					
					PanelEdit paneledit = new PanelEdit(ParentFrame, iGroupIndex, oldGameInfo);
					ParentFrame.setContentPane(paneledit);				//this panel will change the group's game object
					ParentFrame.revalidate();
					
					//the table on this panel should automatically update once it is called back.
				}
				catch (ArrayIndexOutOfBoundsException e1) 			//catch if no row is selected
				{
					lblCaution.setText("You must select the game you wish to edit.");
				}
			}
		});
		btnEdit.setBounds(111, 416, 91, 23);
		add(btnEdit);

	}//end of PanelReview
}//end of class
